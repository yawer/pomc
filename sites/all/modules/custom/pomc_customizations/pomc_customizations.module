<?php


function pomc_customizations_user_insert(&$edit, $account, $category) {
$flag = flag_get_flag('follow_users');
$flag->flag('flag', 1, $account, $skip_permission_check = FALSE); 

}

/*
function pomc_customizations_menu() {
  $items = array();
  $items['post_facebook_msg/%'] = array(
    'title' => 'post message',
    'access callback' => TRUE,
    'page callback' => 'post_facebook_msg',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['facebook-friends'] = array(
    'title' => 'post message',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pomc_fb_friend_list'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function pomc_fb_friend_list() {
  $friend_list = facebook_album_fetcher_get_friend_list();
  if (is_array($friend_list)) {
    foreach ($friend_list as $key) {
      $table_row['profile_pics'] = '<img src="https://graph.facebook.com/' . $key->id . '/picture">';
      $table_row['name'] = $key->name;
      $options = array(
         'attributes' => array(
           'id' => $key->id, 
           'class' => 'invite-fb-friends'
         ),
         'fragment' => 'refresh',
         'html' => TRUE,
      );
      $table_row['invite_friend'] = l('Invite', '', $options);
      $table_data[$key->name] = $table_row;
    }
    ksort($table_data);
    $header = array("Profile Pics", "Name", "Invite Friends");
    $output = theme_table(
      array(
        "header" => $header,
        "rows" => $table_data,
        "attributes" => array("width" => "400px"),
        "sticky" => FALSE,
        "caption" => "",
        "colgroups" => array(),
        "empty" => t("No records available!"),
      )
    );
    $form['show_data'] = array(
      '#markup' => $output,
    );
  }
  else {
    $form['show_data'] = array(
      '#markup' => "<span class='faf_error_class'>" . facebook_album_fetcher_show_error($friend_list) . "</span>",
    );
  }
  return $form;
}
function post_facebook_msg($fb_uid) {
  global $_fb, $_fb_app;
  
  $mail = $fb_uid . '@facebook.com';
  $invite = invite_create();
  $invite->email = $mail;
  invite_save($invite);
  $link = t('Your Invitation Link: ') . url('/invite/accept/' . $invite->reg_code, array('absolute' => TRUE));
  /*$parameters = array(
    'app_id' => $_fb->getAppId(),
    'to' => $fb_uid,
    'description' => $link,
    'link' => 'http://beta.pasteonmycity.com',
    'redirect_uri' => 'http://localhost/pomc_dev/post_msg',
  );
  $url = 'http://www.facebook.com/dialog/send?' . http_build_query($parameters);
  echo '<script type="text/javascript">window.open(' . json_encode($url) . ', "Post message", width=100,height=100)</script>';
  return drupal_json_output($link);
}
*/

function pomc_customizations_init() {
  if (arg(0) == "user" && arg(1) == "login") {
    drupal_add_js(drupal_get_path("module", "pomc_customizations") . "/js/pomc_customizations.js");
  }
}
function pomc_customizations_form_alter(&$form, &$form_state, $form_id) {
global $user;
/*
if((arg(0) == 'board') && ($user->uid == 0) && (!isset($_GET['city']))) {
  if($_SESSION['smart_ip']['location']['city'] == 'Hyderabad') {
    $city = '1';
  }
elseif($_SESSION['smart_ip']['location']['city'] == 'Mumbai') {
    $city = '2';
  }
  elseif($_SESSION['smart_ip']['location']['city'] == 'Pune') {
    $city = '3';
  }
  elseif($_SESSION['smart_ip']['location']['city'] == 'Delhi') {
    $city = '4';
  }
  elseif($_SESSION['smart_ip']['location']['city'] == 'Bangalore') {
    $city = '5';
  }
  elseif($_SESSION['smart_ip']['location']['city'] == 'Chennai') {
    $city = '6';
  }
  elseif($_SESSION['smart_ip']['location']['city'] == 'Kolkata') {
    $city = '7';
  }
  
drupal_goto(htmlentities('board?city='.$city.'&category=All'));
  
}*/
/*
function pomc_customizations_user_insert($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      $edit['first_time_login'] = 1;
      break;
    case 'login':
      $data = unserialize($account->data);
      if ($data['first_time_login']) {
        user_save($account, array('first_time_login' => 0));
      }
      break;
  }
}*/
if($form['#id'] == 'views-exposed-form-dashboard-page-2') {
  global $user;
  $cat_name = 'Everything';
  if(isset($_GET['category'])) {
  $cat_id = $_GET['category'];
  $term = taxonomy_term_load($cat_id);
  if($term) {
    $cat_name = $term->name;
    }
  }

    if(isset($_GET['city'])){
      $city_id =  $_GET['city'];
      $term_city = taxonomy_term_load($city_id);
      $city_name = $term_city->name;
    }
    elseif($user->uid) {
      $city_name = taxonomy_term_load(user_load($user->uid)->field_city['und'][0]['tid'])->name;
    }
if($user->uid==0 && !isset($_GET['city'])){
  $city_name = 'Hyderabad';
  }
  $output = '';
/*Configuring themable output for city*/

 $output .='<div id = "service-city-list">';
if(isset($city_name)) {

$output .= '<div  id="service-city"></div><div id="service-city-label">'.$city_name.'</div><span id="city-arrow"></span>';
}
else {
$output .= '<div id="service-city"></div><div id="service-city-label">City</div><span id="city-arrow"></span>';
}
  $output .= '<ul id = "city-list-options">';
  foreach($form['city']['#options'] as $cid => $city) {
    if($city) {
      $output .= '<li class="city-list" id="city city-'.$cid.'" value = "'.$cid.'">'.$city.'</li>'; 
    }
  }
  $output .= '</ul>';
$output .= '</div>';


/* Configuring themable output for category list */
$output .='<div id = "cat-category-list">';
if(isset($cat_name)) {
$output .= '<div id="cat-category"></div><div id="cat-label">'.$cat_name.'</div>';
}
else {
$output .= '<div id="cat-category"></div><div id="cat-label">Everything</div><span id="city-arrow"></span>';
}
$output .= '<ul id = "category-list-options">';

foreach($form['category']['#options'] as $tid => $taxonomy) {
  if($taxonomy) {
   $parent = taxonomy_get_parents($tid);
      if(!$parent) {
      $children = taxonomy_get_children($tid);
      $children_tid = array_keys($children);
      if($children) {
	    if($tid != 'All') {
		$output .='<div class="children-wrapper">';
        $output .= get_children_html($children, $taxonomy ,$tid);
		$output .= '</div>';
		}
		else {
		$output .='<li class="primary-list" id="primary-category primary-'.$tid.'" value = "'.$tid.'">'.$taxonomy.'</li>';
		}
      }
      else {
      $output .='<li class="primary-list" id="primary-category primary-'.$tid.'" value = "'.$tid.'">'.$taxonomy.'</li>';
       // $output .= '<li class="primary-list" id="primary-category primary-'.$tid.'" value = "'.$tid.'">'.$taxonomy.'</li>'; 
      }
    }

  }

}
$output .= '</ul>';
$output .='</div>';
$form['#suffix'] = $output;

}

if($form_id=='search_block_form') {
 $form['actions']['#attributes']['class'][] = 'element-invisible';
$form['search_block_form']['#attributes']['placeholder'] = t('Search');
}
if ($form_id == "user_login") {
unset($form['name']['#description']);
unset($form['pass']['#description']);
if(module_exists('ajax_register')){
$enabled_links = variable_get('ajax_register_enabled_links', array('password'));
$login_link= array(
  '#theme' => 'item_list',
  '#items' => _ajax_register_ajax_links($enabled_links),
);
}
$form['name']['#title'] = Null;
$form['pass']['#title'] = Null;
$form['name']['#attributes'] = array('placeholder' => t('Email Address'));
$form['pass']['#attributes'] = array('placeholder' => t('Password'));
$form['links']['#markup'] = '<div class="forgot-password-link">Or '.l("Forgot Password?", "user/password").'</div>'; 
$form['actions']['submit']['#attributes'] = array('class' => Null);
$form['actions']['submit']['#attributes'] = array('class' => array('btn btn-large btn-primary'));
// Remove Request New Password from Block form
    $form['links']['#weight'] = 540;

}

if($form_id=='user_register_form') {
//dsm($form);
drupal_set_title('Registration');
$form['Button_first'] = array(
    '#markup' => '<div id="next_first-split-form">Next >></div>',
    '#weight' => 4,
    );
$form['Buttons_second'] = array(
    '#markup' => '<div class="previous_button"><< Previous</div>',
    '#weight' => 30,
    );
//define validation function
$form['#validate'][] = 'my_user_register_validate';
//overwrite the username help text
$form['account']['name']['#description'] = 'Username has to be between 5-15 characters long and can only contain letters and numbers';
}
 if($form_id == 'paste_node_form') {
$form['field_city']['und']['#default_value'][0] = user_load($user->uid)->field_city['und'][0]['tid'];

$form['actions']['submit']['#value'] = t('Create Paste');
 $form['actions']['cancel'] = array(
      '#type'   => 'submit',
      '#value'  => t('Cancel'),
      '#access' => TRUE,
      '#weight' => 15,
      '#class' => array('cancel-button'),
      '#submit' => array('pomc_customizations_form_cancel'),
      '#limit_validation_errors' => array(),
    );
}
if ($form_id == "profile2_edit_user_profile_form"){
  //define validation function
  $form['#validate'][] = 'my_user_register_validate';
  //overwrite the username help text
  $form['account']['name']['#description'] = 'Username has to be between 5-15 characters long and can only contain letters and numbers';
  }

}

function pomc_customizations_form_cancel($form, &$form_state) {
 $destination = $_SERVER['HTTP_REFERER'];;
  drupal_goto($destination);
}

function get_children_html($children, $taxonomy_name, $tid){
$html_list = '<li class="primary-list" id="primary-category primary-'.$tid.'" value = "'.$tid.'">'.$taxonomy_name;
$html_list .='<div id="cat-arrow">&rsaquo;&rsaquo;</div></li><ul id="secondary-category-list" class = "have-children category-child-list-'.$tid.'">';
foreach($children as $ctid => $childrenlist) {
$html_list .='<li class="secondary-list" id="secondary-category childof-'.$tid.' secondary-'.$ctid.'" value ="'.$ctid.'">'.$childrenlist->name.'</li>';
}
$html_list .='</ul>'; 

return $html_list;
}



 
 function get_individual_paste($row, $view) {
 
 $output = '';
 $sharedBy = '';
 $title =  $view->style_plugin->rendered_fields[$view->row_index]['title'];
 $image=  $view->style_plugin->rendered_fields[$view->row_index]['field_paste_image'];
 $category =   $view->style_plugin->rendered_fields[$view->row_index]['field_category'];
  $city =   $view->style_plugin->rendered_fields[$view->row_index]['field_city'];
  $commentCount = $view->style_plugin->rendered_fields[$view->row_index]['comment_count'];
  $author = $view->style_plugin->rendered_fields[$view->row_index]['name'];
  if(isset($view->style_plugin->rendered_fields[$view->row_index]['name_1'])) {
  $sharedBy = $view->style_plugin->rendered_fields[$view->row_index]['name_1'];
  }
//  dpm(taxonomy_get_term_by_name($category));
  $category_id = array_keys(taxonomy_get_term_by_name($category));
  $city_id = array_keys(taxonomy_get_term_by_name($city));
  $categorylink = l($category , "board/city=" . $city_id[0]."&category=".$category_id[0]);
  $description =  $view->style_plugin->rendered_fields[$view->row_index]['body'];
  $nid=$view->style_plugin->rendered_fields[$view->row_index]['nid'];
  $like = flag_get_flag('like');
  $share = flag_get_flag('share');
  global $user;
  $likelink =($user->uid) ? flag_create_link('like', $nid) : '<a href="home" title="Login or Register to Like">Like</a>';
  $sharelink =($user->uid) ? flag_create_link('share', $nid) : '<a href="home" title="Login or Register to Share">Share</a>';
   $print_form = drupal_get_form("comment_node_paste_form", (object) array('nid' => $nid));
  hide($print_form['author']);
  $comment_form = ($user->uid) ? drupal_render($print_form) : '<div><a class="nologin-comment" href="home">Login or Register to comment</a></div>';

 $output .= '<div class="column clearfix pull-left"><!--<div class="curl"></div>--><div class="top"><div class="category">'. $category .'<!-- url = category-name/city-name/ --></div></div><div class="mid"><h2 class="title"> '.$title.'</h2><div class="pull-left">by '.$author.'<!-- url = user-name/ --></div><div class="pasteimage">' . $image . '</div><p class="desc">'.$description.'</p><div class="paste-bar clearfix"><div class="pull-left">'.$likelink.' <span id="lightframe"> &bull; </span>'.$sharelink.'</div></div>
<div class="pull-left paste-stats"><span> ' . $like->get_count($nid) . ' Likes </span><span> &bull; </span><span> '.$share->get_count($nid) .' Shares</span><span> &bull; </span><span class="info clearfix commentcount">' .$commentCount.' <b class="not-comment" ></b></span></div>'. $comment_form .'</div><div class="bot"></div></div>';
return $output;
 
 }
 /*
function user_profile_theming($account) {
$output = '';
$profile_picture = $name = $description = '';
 $profile = profile2_load_by_user($account, $type_name = NULL);
 $follow = flag_get_flag('follow_users');
 $numberFollowers = $follow->get_count($account);
 $numberofFollowing = $follow->get_user_count($account);
// dpm($follow);
 $followlink = flag_create_link('follow_users', $account);
 //dpm($profile['user_profile']);
 if(isset($profile['user_profile']) && isset($profile['user_profile']->field_name['und'][0]['value'])) {
$name =$profile['user_profile']->field_name['und'][0]['value'];
}
if(isset($profile['user_profile']) && ($profile['user_profile']->field_profile_image['und'][0]['filename'])) {
$path = $profile['user_profile']->field_profile_image['und'][0]['filename']; 
$profile_picture = theme('image_style', array('style_name' => 'profile-picture', 'path' => $path));
}
if (isset($profile['user_profile']) && ($profile['user_profile']->field_description['und'][0]['value'])) {
$description = $profile['user_profile']->field_description['und'][0]['value'];
}
//print $image = drupal_render(field_view_field('profile2', $profile['user_profile'], 'field_profile_image'));
$editprofileLink = l("Edit Profile", "profile-user_profile/". $account. "/edit");
$output .= '<div class="user-profile clearfix"><div class="user-pic pull-left">'.$profile_picture.'</div><div class="user-desc  pull-left"><h2 class="user-name"> '. $name .'</h2><p class="user-intro">'.$description.'</p>';
if ($followlink) {
$output .= '<div class="follow"><button class="btn btn-danger" >'.$followlink.'</button></div>';
}
$output.='</div><div class="user-stats  pull-left"><div class="follow"><button class="btn" >'.$editprofileLink.'</button></div><div class="single-stat"><span class="stat-no"> 3245</span> pastes</div><div class="single-stat"><span class="stat-no"> '.$numberofFollowing.'</span> following</div><div class="single-stat"><span class="stat-no"> '. $numberFollowers.'</span> followers</div></div></div>';
 return $output;
}*/
/** Following will return the total no of paste by a user
*/
function get_node_count_by_user($id_user){
  $result = db_query('SELECT COUNT(*) as count_paste FROM {node} WHERE uid = :uid', array(':uid' => $id_user));
  foreach ($result as $record) {
  return $record->count_paste;
  }
}
function get_like_count($nid) {
  $like = flag_get_flag('like');
  //$share = flag_get_flag('share');
$count = $like->get_count($nid);
//dpm($count);
return $count;
}

function get_share_count($nid) {
  //$like = flag_get_flag('like');
  $share = flag_get_flag('share');
$count = $share->get_count($nid);
return $count;
}

function custom_menu_for_header() {
global $user;

if($user->uid){
$output = '';
$output .= '<ul class="nav nav-pills pull-right">';
//$output .= '<li class="active">'.l("Home", "home").'</li>';
$output .= '<li>'.l("Create Paste", "node/add/paste").'</li>';
$output .= '<li>'.l("Notifications", "notifications").'</li>';
if(isset(user_load($user->uid)->field_full_name['und'][0]['value'])) {
$fullname = user_load($user->uid)->field_full_name['und'][0]['value'];
$output .= '<li class="dropdown">'.l($fullname, "user/".$user->uid, array("attributes" => array("class" => array("dropdown-toggle")))).'';
}

$output .= '<ul class="dropdown-menu">';
$output .=' <li>'.l("Inbox", "messages").'</li>';
$output .= '<li>'.l("Followers", "user/".$user->uid."/followers").'</li>';
$output .= '<li>'.l("Following", "user/".$user->uid."/following").'</li>';
//$output .= '<li>'.l("Invite Friends", "user/invite-friends").'</li>';
$output .= '<li>'.l("Edit Profile", "user/".$user->uid."/edit").'</li>';
$output .= '<li>'.l("Logout", "user/logout").'</li>';
$output .='</ul></li></ul>';
}
else {
$output .= '<ul class="pull-right login-but">';
$output .= '<li class="">'.l("Log In", "user/login",  array("attributes" => array("class" => array("active")))).'</li>';
$output .="</ul>";
}
return $output;                
}

function pomc_customizations_admin_paths() {
  $paths = array(
    'request-invite/request-an-invite' => TRUE,
  );
  return $paths;
}

function my_user_register_validate($form, &$form_state) {

  $output['error'] = FALSE;
  $username = $form_state['input']['name'];
  $password = $form_state['input']['pass']['pass1'];

  if (strlen($username) < 5 || strlen($username) > 15) {
    $output['error'] = TRUE;
    $output['msg'] = t('The username has to be between 5 and 15 characters long. ');
  }
  if (strpos($username,' ') > 0 || strpos($username,'.') > 0 || strpos($username,'-') > 0 || strpos($username,'_') > 0 || strpos($username, "'") !== FALSE ){
    $output['error'] = TRUE;
    $output['msg'] = t('Username cannot contain spaces . - _ ' . chr(39)  );
  }

//display username errors
  if ($output['error']){
    //drupal_set_message( $output['msg'], 'error');
    form_set_error('name', $output['msg']);
  }
}

?>
